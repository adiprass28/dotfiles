set encoding=utf-8

set nocompatible

autocmd BufRead * normal zR

set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set smarttab
set autochdir

" set cmdheight=1
" set showcmd
" set statusline=1
" set display=lastline
set backspace=indent,eol,start

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

imap jk <Esc>
" nnoremap \\ <Esc>
cmap jk <c-c>
vmap v <Esc>

set list listchars=tab:»·,trail:·

map ; :

let g:mapleader=','

set relativenumber number

nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v
map <leader>/ :nohl<CR>
set hlsearch
set incsearch
set ignorecase
set smartcase
" Keep search result at the centre of the screen  
nnoremap n nzz
nnoremap N Nzz

nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" move window 
nnoremap <a-h> <c-w><c-h>
nnoremap <a-j> <c-w><c-j>
nnoremap <a-k> <c-w><c-k>
nnoremap <a-l> <c-w><c-l>

" delete all contents in a file
nnoremap <leader>da ggVGd

" set cursorline
" set cursorcolumn

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

nmap qa :wqa<cr>
nmap qf :q!<cr>
nmap qq :q<cr>
nmap qw :wq<cr>

map <leader>j :bnext<cr>
map <leader>k :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>te :tabedit 
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>l :tabnext<cr>
map <leader>h :tabprev<cr>
map <leader>L :tablast<cr>
map <leader>H :tabfirst<cr>

map <leader>m :vsplit term://bash<CR> :set nonu nornu<cr> :set scl=no<cr>i
" map <leader>m :vertical terminal<cr>
tnoremap <leader>q <c-\><c-n>:q!<cr>
nnoremap <leader>q :q!<cr>
tnoremap <a-h> <C-\><C-N><C-w>h
tnoremap <Esc> <C-\><C-n>
" set termwinsize=10x0

nmap <leader>s :source vimrc<cr>

syntax on

set title

set so=5

filetype plugin on

" set undofile
" set undodir=~/.config/vim/undodir

set nobackup
set nowb
set noswapfile

" set foldmethod=indent

call plug#begin('~/.vim/plugged')

Plug 'prettier/vim-prettier', { 'do': 'yarn install --frozen-lockfile --production' }
Plug 'preservim/nerdcommenter'
  let g:NERDSpaceDelims = 1
  let g:NERDCompactSexyComs = 1
Plug 'morhetz/gruvbox'
" Plug 'airblade/vim-gitgutter'
  " set updatetime=100
  " autocmd BufRead,BufNewFile * setlocal signcolumn=auto 
  " " set signcolumn=auto
  " " let g:gitgutter_sign_allow_clobber = 1
  " " let g:gitgutter_set_sign_backgrounds = 1
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'dsznajder/vscode-es7-javascript-react-snippets', { 'do': 'yarn install --frozen-lockfile && yarn compile' }
Plug 'SirVer/ultisnips'
  let g:UltiSnipsExpandTrigger="<c-l>"
  let g:UltiSnipsJumpForwardTrigger="<c-b>"
  let g:UltiSnipsJumpBackwardTrigger="<c-z>"
  let g:UltiSnipsEditSplit="vertical"
Plug 'mlaursen/vim-react-snippets'
" Plug 'honza/vim-snippets'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
" Plug 'mattn/emmet-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
"  map <leader>f :Files<CR>
"  map <C-P> :GFiles<CR>
"  map <C-B> :Buffer<CR>
Plug 'luochen1990/rainbow'
  let g:rainbow_active = 1 
Plug 'aaren/arrowkeyrepurpose'
Plug 'EinfachToll/DidYouMean'
Plug 'ap/vim-css-color'
Plug 'tpope/vim-fugitive'
" Batas rekomendasi Plug dari Riza Fahmi
Plug 'preservim/nerdtree' 
  let g:NERDTreeWinPos = "right"
"  nmap <F8> :TabarToggle<CR>
"  set g:tagbar_ctags_bin
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
  let g:airline_theme='dark'
Plug 'tpope/vim-unimpaired'
Plug 'sotte/presenting.vim'
" Plug 'vimwiki/vimwiki'
Plug 'junegunn/goyo.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }


call plug#end()

au FileType rst let b:presenting_slide_separator = '\v(^|\n)\~{4,}'

colorscheme gruvbox
set background=dark

nnoremap <leader>n :NERDTreeFocus<CR>
" nnoremap <c-n> :NERDTreeFind<CR>

" coc.nvim configuration (url: 'https://github.com/neoclide/coc.nvim') {{{

set encoding=utf-8
set nowritebackup
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> cd <Plug>(coc-definition)
nmap <silent> cy <Plug>(coc-type-definition)
nmap <silent> ci <Plug>(coc-implementation)
nmap <silent> cr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" end of coc configuration }}}

" vim-fugitive {{{
nmap <leader>gg :G<cr>
nmap <leader>gd :Git add .
nmap <leader>gl :G log<cr>
nmap <leader>gd :G diff<cr>
nmap <leader>gc :G commit<cr>
" end of vim-fugitive }}}

" emoji shotcuts (from https://emojipedia.org/) {{{
" people
ab :smile: 🙂
ab :neutral: 😐
ab :kissing: 😘
ab :exercise: 😅
ab :winking: 😉

ab :heart: ❤️ 
ab :watermelon: 🍉
" }}}
